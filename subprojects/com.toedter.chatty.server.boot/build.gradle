buildscript {
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.10.1'
    }
}

plugins {
    id 'org.hidetake.ssh' version '0.4.3'
    id 'org.asciidoctor.convert' version '1.5.3'
}

ext {
    snippetsDir = file("$buildDir/generated-snippets")
}

repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
}

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply from: "$rootDir/gradle/integrationTest.gradle"

dependencies {

    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-data-rest"
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile "org.springframework.boot:spring-boot-starter-jetty"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-devtools"
    compile "org.springframework.data:spring-data-rest-hal-browser"
    compile "org.projectlombok:lombok:1.16.6"
    compile "org.atmosphere:atmosphere-annotations:2.4.0"
    compile "org.atmosphere:wasync:2.1.2"
    compile "javax.inject:javax.inject:1"
    runtime 'org.hsqldb:hsqldb:2.3.3'
    runtime 'org.atteo:evo-inflector:1.2.1'

    testCompile 'com.jayway.jsonpath:json-path'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile "org.springframework.restdocs:spring-restdocs-mockmvc:$springRestdocsVersion"
}

task createBuildInfoFile << {
    def buildInfoFile = new File("$buildDir/resources/main/build-info.properties")
    Properties props = new Properties()
    props.setProperty('version', project.version.toString())
    props.setProperty('timestamp', project.buildTimestamp)
    props.store(buildInfoFile.newWriter(), null)
}

task createDockerfile << {
    def dockerfile = new File("$buildDir/Dockerfile")
    dockerfile.write 'FROM java\n'
    dockerfile << 'ADD libs/com.toedter.chatty.server.boot-' + project.version + '.jar .\n'
    dockerfile << 'CMD /usr/bin/java -Xmx400m -Xms400m -jar /com.toedter.chatty.server.boot-' + project.version + '.jar .\n'
    dockerfile << 'EXPOSE 8080\n'
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    dependsOn test
    backends = ['html5', 'pdf']
    attributes = [
            snippets: snippetsDir
    ]
    inputs.dir snippetsDir
}

task copyWebApp(type: Copy) {
    from project(':com.toedter.chatty.client.angular1').file('dist')
    into "$buildDir/resources/main/static"
}
// copyWebApp.dependsOn ':com.toedter.chatty.client.angular1:gruntDist'

task copyAngular2Client(type: Copy) {
    from project(':com.toedter.chatty.client.angular2').file('dist')
    into "$buildDir/resources/main/static/ng2"
}
// copyAngular2Client.dependsOn ':com.toedter.chatty.client.angular2:gulp_default'

task copyDoc(type: Copy) {
    from "${asciidoctor.outputDir}"
    into "$buildDir/resources/main/static/docs"
}

jar {
    dependsOn createBuildInfoFile
    dependsOn copyWebApp
    dependsOn copyAngular2Client
    dependsOn asciidoctor
    dependsOn copyDoc
}

task stage(dependsOn: [':com.toedter.chatty.client.angular2:gulp_build', 'jar', 'bootRepackage'])



