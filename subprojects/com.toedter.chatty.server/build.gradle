import com.toedter.chatty.ShutdownServerTask
import org.apache.tools.ant.taskdefs.condition.Os

apply from: "$rootDir/gradle/integrationTest.gradle"

dependencies {
    compile project(':com.toedter.chatty.model')

    def jerseyVersion = '2.9'
    compile "org.glassfish.jersey.core:jersey-server:$jerseyVersion"
    compile "org.glassfish.jersey.core:jersey-client:$jerseyVersion"
    compile "org.glassfish.jersey.containers:jersey-container-grizzly2-http:$jerseyVersion"
    compile "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion"
    compile "org.glassfish.jersey.media:jersey-media-moxy:$jerseyVersion"

    compile 'com.theoryinpractise:halbuilder-standard:3.0.1'

    compile 'org.eclipse.jetty.aggregate:jetty-all:9.1.5.v20140505'

    compile "org.atmosphere:atmosphere-annotations:2.1.6"
    compile "org.atmosphere:wasync:1.3.2"
    compile "org.glassfish.grizzly:grizzly-http-all:2.3.11"

    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'org.slf4j:jul-to-slf4j:1.7.7'
    compile 'ch.qos.logback:logback-classic:1.1.2'

    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-all:1.9.5'
}

//tasks.withType(Test) {
//    testLogging {
//        showStandardStreams = true
//        exceptionFormat 'full'
//    }
//}

task startServerAsyncWithAnt << {
    logger.lifecycle('Starting Jetty asynchronously...')
    def cp = sourceSets.main.runtimeClasspath.asPath
    ant.java(fork: true, spawn: true, classname: "com.toedter.chatty.server.JettyServer", classpath: cp)
}

task startServerSync(type: JavaExec) {
    if (project.hasProperty('port')) {
        args = ['-port=' + port]
    }
    main = 'com.toedter.chatty.server.JettyServer'
    classpath = sourceSets.main.runtimeClasspath
}

task startServerAsync(type: ExecAndWait) {
    project.ext.freePort = findFreePort("$it.name")

    String gradlewExecutable = Os.isFamily(Os.FAMILY_WINDOWS) ? "gradlew.bat" : "./gradlew"
    command "$project.rootDir/$gradlewExecutable :com.toedter.chatty.server:startServerSync -Pport=$project.freePort"
    readyString 'Jetty server started'
    logMessage ":$project.name:$it.name: Jetty server started using port: $project.freePort"
}

task stopServer(type: ShutdownServerTask) {
    port = project.freePort;
}

def int findFreePort(String task) {
    ServerSocket socket = null;
    try {
        socket = new ServerSocket(0);
        int port = socket.getLocalPort();
        // logger.lifecycle(":$project.name:$task: using port {} for integration tests.", port);
        return port;
    } catch (IOException e) {
        logger.lifecycle(":$project.name:$task: cannot find free port, will use 8080.");
        return 8080;
    } finally {
        if (socket != null) {
            try {
                socket.close();
            } catch (IOException e) {
                logger.lifecycle("cannot close socket used for free port creation.");
            }
        }
    }
}
